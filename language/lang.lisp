(setq g 6.6725e-11)

(defun время (планета объект) ;вычисляет время
    
        (list объект  'упадет 'за (sqrt 
                  (/ 
                  (* 2 (get объект 'высота))
                  (get планета 'G))) 'секунд)
)

(defun скорость (планета объект) ;вычисляет время
        (list объект 'достигнет 'скорости (sqrt 
                  (* 
                  (* 2 (get объект 'высота))
                  (get планета 'G))) 'метров 'в 'секунду)
)
       

(defun Планета(Имя &key радиус вес) 
    (setf (get Имя 'G) (* g ( / вес(* радиус радиус)))) ; ускорение свободного падния
   
)


(defun Предмет(Имя &key высота ) 
    (setf (get Имя 'высота) высота)  ; расстояние с который падает объект
)


(defmacro СвободноеПадение (&rest args)
	`(let
		(
		    (запрос (car  ',args))
		    (планета (cadr ',args))
		    (объект (caddr ',args))
		    (результат Nil)
		) 
          (cond
              
	    ((equal запрос 'время) (setq результат (время планета объект)))
            ((equal запрос 'скорость) (setq результат (скорость планета объект)))	
		
		)        
      (print результат)		
      )			 
)
    
(defmacro Установи (&rest args)
	`(let
		(
			(Объект (car ',args))
		        (название (cadr ',args))
		        (данные (cddr ',args))
			(результат Nil)
       		)
       		(cond 
		((equal Объект 'Планета) ((lambda(радиус вес)(планета название :радиус радиус :вес вес ))(car данные) (cadr данные)))
                ((equal Объект 'Предмет)  ((lambda(высота)(предмет название :высота высота ))(car данные)))
      		)  
           	
      	  )			 
)


